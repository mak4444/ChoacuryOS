#include "gui.hpp"
#include "headers/bitmap.hpp"
#include "headers/rim.hpp"
#include "../../drivers/utils.h"
#include "../../drivers/vbe.h"

void GUI::clear(Buffer buffer, uint32_t color) {
	for (uint32_t y = 0; y < buffer.height; y++) {
		for (uint32_t x = 0; x < buffer.width; x++) {
			GUI::put_pixel(buffer, GUI::uPoint32(x, y), color);
		}
	}
}

void GUI::clear(Window* window, uint32_t color) {
    /*for (uint32_t y = 0; y < window->height; y++) {
        for (uint32_t x = 0; x < window->width; x++) {
            GUI::put_pixel(window, GUI::uPoint32(x, y), color);
        }
    }*/
	GUI::clear(GUI::Buffer(window->buffer, window->width, window->height), color);
}

uint32_t GUI::get_pixel(Buffer buffer, uPoint32 point) {
	return buffer.buffer[point.y * buffer.width + point.x];
}

uint32_t GUI::get_pixel(Window* window, uPoint32 point) {
    return window->buffer[point.y * window->width + point.x];
}

void GUI::put_pixel(Buffer buffer, uPoint32 point, uint32_t color) {
	uint32_t *pixel = &buffer.buffer[point.y * buffer.width + point.x];

	uint32_t existing_color = *pixel;
	uint8_t alpha = (color >> 24) & 0xFF; // Extract alpha component from the color

	if (alpha == 0xFF) {
		// Fully transparent, do nothing
		return;
	} else if (alpha == 0x00) {
		// Fully opaque, overwrite
		*pixel = color & 0xFFFFFF; // Mask out alpha
	} else {
		// Blend the colors
		uint8_t src_r = (color >> 16) & 0xFF;
		uint8_t src_g = (color >> 8) & 0xFF;
		uint8_t src_b = color & 0xFF;

		uint8_t dst_r = (existing_color >> 16) & 0xFF;
		uint8_t dst_g = (existing_color >> 8) & 0xFF;
		uint8_t dst_b = existing_color & 0xFF;

		// Perform alpha blending
		uint8_t blended_r = ((src_r * (255 - alpha)) + (dst_r * alpha)) / 255;
		uint8_t blended_g = ((src_g * (255 - alpha)) + (dst_g * alpha)) / 255;
		uint8_t blended_b = ((src_b * (255 - alpha)) + (dst_b * alpha)) / 255;

		// Write the blended color back to the framebuffer
		*pixel = (blended_r << 16) | (blended_g << 8) | blended_b;
	}
}

void GUI::put_pixel(Window* window, uPoint32 point, uint32_t color) {
    /*uint32_t *pixel = &window->buffer[point.y * window->width + point.x];

    uint32_t existing_color = *pixel;
    uint8_t alpha = (color >> 24) & 0xFF; // Extract alpha component from the color

    if (alpha == 0xFF) {
        // Fully transparent, do nothing
        return;
    } else if (alpha == 0x00) {
        // Fully opaque, overwrite
        *pixel = color & 0xFFFFFF; // Mask out alpha
    } else {
        // Blend the colors
        uint8_t src_r = (color >> 16) & 0xFF;
        uint8_t src_g = (color >> 8) & 0xFF;
        uint8_t src_b = color & 0xFF;

        uint8_t dst_r = (existing_color >> 16) & 0xFF;
        uint8_t dst_g = (existing_color >> 8) & 0xFF;
        uint8_t dst_b = existing_color & 0xFF;

        // Perform alpha blending
        uint8_t blended_r = ((src_r * (255 - alpha)) + (dst_r * alpha)) / 255;
        uint8_t blended_g = ((src_g * (255 - alpha)) + (dst_g * alpha)) / 255;
        uint8_t blended_b = ((src_b * (255 - alpha)) + (dst_b * alpha)) / 255;

        // Write the blended color back to the framebuffer
        *pixel = (blended_r << 16) | (blended_g << 8) | blended_b;
    }*/

	GUI::put_pixel(GUI::Buffer(window->buffer, window->width, window->height), point, color);
}

void GUI::draw_line(Buffer buffer, uPoint32 a, uPoint32 b, uint32_t color) {
	uint32_t x1 = a.x;
	uint32_t y1 = a.y;
	uint32_t x2 = b.x;
	uint32_t y2 = b.y;

	int dx = abs(x2 - x1), sx = x1 < x2 ? 1 : -1;
	int dy = -abs(y2 - y1), sy = y1 < y2 ? 1 : -1;
	int err = dx + dy, e2;

	while (1) {
		GUI::put_pixel(buffer, uPoint32(x1, y1), color);
		if (x1 == x2 && y1 == y2) break;
		e2 = 2 * err;
		if (e2 >= dy) { err += dy; x1 += sx; }
		if (e2 <= dx) { err += dx; y1 += sy; }
	}
}

void GUI::draw_line(Window* window, uPoint32 a, uPoint32 b, uint32_t color) {
    /*uint32_t x1 = a.x;
    uint32_t y1 = a.y;
    uint32_t x2 = b.x;
    uint32_t y2 = b.y;

    int dx = abs(x2 - x1), sx = x1 < x2 ? 1 : -1;
    int dy = -abs(y2 - y1), sy = y1 < y2 ? 1 : -1;
    int err = dx + dy, e2;

    while (1) {
        GUI::put_pixel(window, uPoint32(x1, y1), color);
        if (x1 == x2 && y1 == y2) break;
        e2 = 2 * err;
        if (e2 >= dy) { err += dy; x1 += sx; }
        if (e2 <= dx) { err += dx; y1 += sy; }
    }*/

	GUI::draw_line(GUI::Buffer(window->buffer, window->width, window->height), a, b, color);
}

void GUI::rect(Buffer buffer, uRect32 rect, uint32_t color) {
	uint32_t sx = rect.x;
	uint32_t sy = rect.y;
	uint32_t ex = rect.x + rect.width;
	uint32_t ey = rect.y + rect.height;

	draw_line(buffer, uPoint32(sx, sy), uPoint32(ex, sy), color); // Top line
	draw_line(buffer, uPoint32(ex, sy), uPoint32(ex, ey), color); // Right line
	draw_line(buffer, uPoint32(sx, ey), uPoint32(ex, ey), color); // Bottom line
	draw_line(buffer, uPoint32(sx, ey), uPoint32(sx, sy), color); // Left line
}

void GUI::rect(Window* window, uRect32 rect, uint32_t color) {
    /*uint32_t sx = rect.x;
    uint32_t sy = rect.y;
    uint32_t ex = rect.x + rect.width;
    uint32_t ey = rect.y + rect.height;

    draw_line(window, uPoint32(sx, sy), uPoint32(ex, sy), color); // Top line
    draw_line(window, uPoint32(ex, sy), uPoint32(ex, ey), color); // Right line
    draw_line(window, uPoint32(sx, ey), uPoint32(ex, ey), color); // Bottom line
    draw_line(window, uPoint32(sx, ey), uPoint32(sx, sy), color); // Left line*/

	GUI::rect(GUI::Buffer(window->buffer, window->width, window->height), rect, color);
}

void GUI::fill_rect(Buffer buffer, uRect32 rect, uint32_t color) {
	uint32_t sx = rect.x;
	uint32_t sy = rect.y;
	uint32_t ex = rect.x + rect.width;
	uint32_t ey = rect.y + rect.height;
	for (uint32_t y = sy; y < ey; y++) {
		for (uint32_t x = sx; x < ex; x++) {
			GUI::put_pixel(buffer, uPoint32(x, y), color);
		}
	}
}

void GUI::fill_rect(Window* window, uRect32 rect, uint32_t color) {
    /*uint32_t sx = rect.x;
    uint32_t sy = rect.y;
    uint32_t ex = rect.x + rect.width;
    uint32_t ey = rect.y + rect.height;
    for (uint32_t y = sy; y < ey; y++) {
        for (uint32_t x = sx; x < ex; x++) {
            GUI::put_pixel(window, uPoint32(x, y), color);
        }
    }*/

	GUI::fill_rect(GUI::Buffer(window->buffer, window->width, window->height), rect, color);
}

bool GUI::point_in_rect(uPoint32 point, uRect32 rect) {
    if(point.x >= rect.x && point.x < rect.x + rect.width) {
        if(point.y >= rect.y && point.y < rect.y + rect.height) {
            return true;
        }
    }
    return false;
}

void GUI::draw_bitmap(Window* window, uBitmap bitmap) {
    BITMAPFILEHEADER *file_header = (BITMAPFILEHEADER *)bitmap.data;
    BITMAPINFOHEADER *info_header = (BITMAPINFOHEADER *)(bitmap.data + sizeof(BITMAPFILEHEADER));

    // 4D42 is BM in HEX
    if(file_header->bfType != 0x4D42) {
        return;
    }

    int row_size = ((info_header->biBitCount * info_header->biWidth + 31) / 32) * 4;
    const uint8_t *pixel_data = bitmap.data + file_header->bfOffBits;

    for(int _y = 0; _y < abs(info_header->biHeight); _y++) {
        for(int _x = 0; _y < info_header->biWidth; _x++) {
            int idx = _y * row_size + _x * (info_header->biBitCount / 8);
            uint8_t g = pixel_data[idx + 2];
            uint8_t b = pixel_data[idx];
            uint8_t r = pixel_data[idx + 1];
            uint8_t a = 256; // Bitmaps don't support transparency, so just have this

            // RGB -> HEX                            Red                  Green               Blue         Alpha
            GUI::put_pixel(window, uPoint32(bitmap.x + _x, bitmap.y + _y), ((r & 0xff) << 16) + ((g & 0xff) << 8) + (b & 0xff) + ((a & 0xff) << 24));
        }
    }
}

void GUI::draw_rim(Window* window, uRIM rim) {
    RIMFILEHEADER *file_header = (RIMFILEHEADER *)rim.data;
    RIMINFOHEADER *info_header = (RIMINFOHEADER *)(rim.data + sizeof(RIMFILEHEADER));

    // 5249 is RI in HEX
	if (file_header->bfType != 0x5249) {
		return;
	}

    int row_size = ((info_header->biBitCount * info_header->biWidth + 31) / 32) * 4;
    const uint8_t *pixel_data = rim.data + file_header->bfOffBits;

    for(int _y = 0; _y < abs(info_header->biHeight); _y++) {
        for(int _x = 0; _y < info_header->biWidth; _x++) {
            int idx = _y * row_size + _x * (info_header->biBitCount / 8);
            uint8_t r = pixel_data[idx + 0];
            uint8_t g = pixel_data[idx + 1];
            uint8_t b = pixel_data[idx + 2];
            uint8_t a = pixel_data[idx + 3];

            // RGB -> HEX                            Red                  Green               Blue         Alpha
            GUI::put_pixel(window, uPoint32(rim.x + _x, rim.y + _y), ((r & 0xff) << 16) + ((g & 0xff) << 8) + (b & 0xff) + ((a & 0xff) << 24));
        }
    }
}

/*void GUI::draw_circle(Window* window, uCircle32 circle, uint32_t color) {
    int width = circle.radius * 2;
    int height = circle.radius * 2;

    for(uint32_t angle = 0; angle < 360; angle++) {
        int x = (circle.radius * cos(angle * M_PI / 180));
        int y = (circle.radius * sin(angle * M_PI / 180));

        int cx = height / 2 + x;
        int cy = width / 2 + y;

        put_pixel(window, uPoint32(circle.x + cx, circle.y + cy), color);
    }

    GUI::draw_line(window, uPoint32(circle.x, circle.y), uPoint32(circle.x + (circle.radius * 2), circle.y + (circle.radius * 2)), 0xFFFFFF);
}*/

void GUI::draw_circle(Buffer buffer, uCircle32 circle, uint32_t color) {
	// Provided by @Imalaia3 on Discord

	uint32_t x = 0;
	uint32_t y = circle.radius;
	int32_t d = 3 - 2 * circle.radius;

	int ex = circle.radius;
	int ey = circle.radius;

	while (x <= y) {
		put_pixel(buffer, uPoint32(circle.x + x + ex, circle.y + y + ey), color);
		put_pixel(buffer, uPoint32(circle.x - x + ex, circle.y + y + ey), color);
		put_pixel(buffer, uPoint32(circle.x + x + ex, circle.y - y + ey), color);
		put_pixel(buffer, uPoint32(circle.x - x + ex, circle.y - y + ey), color);
		put_pixel(buffer, uPoint32(circle.x + y + ex, circle.y + x + ey), color);
		put_pixel(buffer, uPoint32(circle.x - y + ex, circle.y + x + ey), color);
		put_pixel(buffer, uPoint32(circle.x + y + ex, circle.y - x + ey), color);
		put_pixel(buffer, uPoint32(circle.x - y + ex, circle.y - x + ey), color);
		if (d > 0) {
			d = d + 4 * (x - y) + 10;
			y--;
		} else {
			d = d + 4 * x + 6;
		}
		x++;
	}
}

void GUI::draw_circle(Window* window, uCircle32 circle, uint32_t color) {
    /*// Provided by @Imalaia3 on Discord

    uint32_t x = 0;
    uint32_t y = circle.radius;
    int32_t d = 3 - 2 * circle.radius;

    int ex = circle.radius;
    int ey = circle.radius;

    while (x <= y) {
        put_pixel(window, uPoint32(circle.x + x + ex, circle.y + y + ey), color);
        put_pixel(window, uPoint32(circle.x - x + ex, circle.y + y + ey), color);
        put_pixel(window, uPoint32(circle.x + x + ex, circle.y - y + ey), color);
        put_pixel(window, uPoint32(circle.x - x + ex, circle.y - y + ey), color);
        put_pixel(window, uPoint32(circle.x + y + ex, circle.y + x + ey), color);
        put_pixel(window, uPoint32(circle.x - y + ex, circle.y + x + ey), color);
        put_pixel(window, uPoint32(circle.x + y + ex, circle.y - x + ey), color);
        put_pixel(window, uPoint32(circle.x - y + ex, circle.y - x + ey), color);
        if (d > 0) {
            d = d + 4 * (x - y) + 10;
            y--;
        } else {
            d = d + 4 * x + 6;
        }
        x++;
    }*/

	GUI::draw_circle(GUI::Buffer(window->buffer, window->width, window->height), circle, color);
}

void GUI::draw_filled_circle(Buffer buffer, uCircle32 circle, uint32_t color) {
	int x = circle.radius;
	int y = 0;
	int decisionOver2 = 1 - x;

	int ex = circle.radius;
	int ey = circle.radius;

	while (y <= x) {
		for (int i = -x; i <= x; i++) {
			put_pixel(buffer, uPoint32(circle.x + i + ex, circle.y + y + ey), color);
			put_pixel(buffer, uPoint32(circle.x + i + ex, circle.y - y + ey), color);
		}
		for (int i = -y; i <= y; i++) {
			put_pixel(buffer, uPoint32(circle.x + i + ex, circle.y + x + ey), color);
			put_pixel(buffer, uPoint32(circle.x + i + ex, circle.y - x + ey), color);
		}
		y++;
		if (decisionOver2 <= 0) {
			decisionOver2 += 2 * y + 1;
		} else {
			x--;
			decisionOver2 += 2 * (y - x) + 1;
		}
	}
}

void GUI::draw_filled_circle(Window* window, uCircle32 circle, uint32_t color) {
    /*uint32_t center_x = circle.x + circle.radius;
    uint32_t center_y = circle.y + circle.radius;

    for(uint32_t y = -circle.radius; y <= circle.radius; y++) {
        for(uint32_t x = -circle.radius; x <= circle.radius; x++) {
            if((x * x) * (y * y) <= (circle.radius * circle.radius)) {
                put_pixel(window, uPoint32(circle.x + x, circle.y + y), color);
            }
        }
    }*/

    /*int x = circle.radius;
    int y = 0;
    int decisionOver2 = 1 - x;

    int ex = circle.radius;
    int ey = circle.radius;

    while (y <= x) {
        for (int i = -x; i <= x; i++) {
            put_pixel(window, uPoint32(circle.x + i + ex, circle.y + y + ey), color);
            put_pixel(window, uPoint32(circle.x + i + ex, circle.y - y + ey), color);
        }
        for (int i = -y; i <= y; i++) {
            put_pixel(window, uPoint32(circle.x + i + ex, circle.y + x + ey), color);
            put_pixel(window, uPoint32(circle.x + i + ex, circle.y - x + ey), color);
        }
        y++;
        if (decisionOver2 <= 0) {
            decisionOver2 += 2 * y + 1;
        } else {
            x--;
            decisionOver2 += 2 * (y - x) + 1;
        }
    }

    GUI::draw_line(window, uPoint32(circle.x, circle.y), uPoint32(circle.x + (circle.radius * 2), circle.y + (circle.radius * 2)), 0xFFFFFF);*/

	GUI::draw_filled_circle(GUI::Buffer(window->buffer, window->width, window->height), circle, color);
}

extern unsigned char GUI::unifont[10294] = {
	0x36, 0x04, 0x03, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x3C, 0x24, 0x42, 0x42, 0x24, 0x3C, 
	0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 0x81, 0xA5, 0x81, 0xA5, 0x99, 
	0x42, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 
	0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x1C, 0x3E, 
	0x7F, 0x3E, 0x1C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 0x99, 
	0xA5, 0xA1, 0xA1, 0xA5, 0x99, 0x42, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 
	0xB9, 0xA5, 0xA5, 0xB9, 0xA9, 0xA5, 0x42, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x38, 0x7C, 0x7C, 0x7C, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x44, 0x82, 0x82, 0x82, 0x44, 0x38, 0x00, 0x00, 0x00, 
	0x00, 0x38, 0x44, 0x04, 0x38, 0x04, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x04, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0x30, 0x00, 0x00, 0x00, 0x10, 0x30, 0x50, 0x10, 0x10, 0x10, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x12, 0x24, 0x18, 0x68, 0x12, 0x16, 0x2A, 0x4E, 
	0x42, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x18, 0x24, 0x24, 0x42, 0x42, 0x7E, 0x42, 0x42, 
	0x42, 0x42, 0x00, 0x00, 0x0C, 0x30, 0x00, 0x00, 0x18, 0x24, 0x24, 0x42, 0x42, 0x7E, 0x42, 
	0x42, 0x42, 0x42, 0x00, 0x00, 0x18, 0x24, 0x00, 0x00, 0x18, 0x24, 0x24, 0x42, 0x42, 0x7E, 
	0x42, 0x42, 0x42, 0x42, 0x00, 0x00, 0x00, 0x00, 0x08, 0x1C, 0x2A, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x08, 0x2A, 0x1C, 0x08, 0x00, 0x00, 0x32, 0x4C, 0x00, 0x00, 0x18, 0x24, 0x24, 0x42, 
	0x42, 0x7E, 0x42, 0x42, 0x42, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x7A, 0x7A, 
	0x7A, 0x3A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 
	0x40, 0x3C, 0x42, 0x42, 0x3C, 0x02, 0x42, 0x3C, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x7E, 
	0x40, 0x40, 0x40, 0x7C, 0x40, 0x40, 0x40, 0x40, 0x7E, 0x00, 0x00, 0x18, 0x24, 0x00, 0x00, 
	0x7E, 0x40, 0x40, 0x40, 0x7C, 0x40, 0x40, 0x40, 0x40, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0x1C, 0x2A, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x2A, 0x1C, 0x08, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x04, 0xFE, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x20, 0x7F, 0x20, 0x10, 0x00, 0x00, 0x00, 
	0x00, 0x24, 0x24, 0x00, 0x00, 0x7E, 0x40, 0x40, 0x40, 0x7C, 0x40, 0x40, 0x40, 0x40, 0x7E, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x42, 0xFF, 0x42, 0x24, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x3C, 0x3C, 0x7E, 0x7E, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x3C, 0x3C, 0x18, 0x18, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x08, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x22, 0x22, 0x22, 0x22, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x12, 0x12, 
	0x7E, 0x24, 0x24, 0x7E, 0x48, 0x48, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x3E, 
	0x49, 0x48, 0x38, 0x0E, 0x09, 0x49, 0x3E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 
	0x4A, 0x4A, 0x34, 0x08, 0x08, 0x16, 0x29, 0x29, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x1C, 0x22, 0x22, 0x14, 0x18, 0x29, 0x45, 0x42, 0x46, 0x39, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x04, 0x08, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08, 0x04, 0x00, 0x00, 
	0x00, 0x00, 0x20, 0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x10, 0x20, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x49, 0x2A, 0x1C, 0x2A, 0x49, 0x08, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x7F, 0x08, 0x08, 0x08, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 
	0x08, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x04, 0x08, 0x08, 0x10, 
	0x10, 0x20, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x24, 0x42, 0x46, 0x4A, 
	0x52, 0x62, 0x42, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x18, 0x28, 0x08, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 
	0x02, 0x0C, 0x10, 0x20, 0x40, 0x40, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 
	0x42, 0x02, 0x1C, 0x02, 0x02, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
	0x0C, 0x14, 0x24, 0x44, 0x44, 0x7E, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x7E, 0x40, 0x40, 0x40, 0x7C, 0x02, 0x02, 0x02, 0x42, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x1C, 0x20, 0x40, 0x40, 0x7C, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7E, 0x02, 0x02, 0x04, 0x04, 0x04, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x3C, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x3E, 0x02, 0x02, 0x02, 0x04, 0x38, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x08, 
	0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 
	0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 
	0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x20, 0x10, 0x08, 0x04, 
	0x08, 0x10, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x02, 0x04, 
	0x08, 0x08, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x22, 0x4A, 0x56, 
	0x52, 0x52, 0x52, 0x4E, 0x20, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x24, 0x24, 
	0x42, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x42, 
	0x42, 0x42, 0x7C, 0x42, 0x42, 0x42, 0x42, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 
	0x42, 0x42, 0x40, 0x40, 0x40, 0x40, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x78, 0x44, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x7E, 0x40, 0x40, 0x40, 0x7C, 0x40, 0x40, 0x40, 0x40, 0x7E, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7E, 0x40, 0x40, 0x40, 0x7C, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x40, 0x40, 0x4E, 0x42, 0x42, 0x46, 0x3A, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x42, 0x42, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x3E, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x44, 0x44, 
	0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x44, 0x48, 0x50, 0x60, 0x60, 0x50, 0x48, 
	0x44, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
	0x40, 0x40, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x42, 0x66, 0x66, 0x5A, 0x5A, 
	0x42, 0x42, 0x42, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x62, 0x62, 0x52, 0x52, 
	0x4A, 0x4A, 0x46, 0x46, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 
	0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x42, 0x42, 
	0x42, 0x7C, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 
	0x42, 0x42, 0x42, 0x42, 0x42, 0x5A, 0x66, 0x3C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 
	0x42, 0x42, 0x42, 0x7C, 0x48, 0x44, 0x44, 0x42, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x3C, 0x42, 0x42, 0x40, 0x30, 0x0C, 0x02, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x7F, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x41, 0x41, 0x41, 0x22, 0x22, 0x22, 0x14, 0x14, 0x08, 0x08, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x5A, 0x5A, 0x66, 0x66, 0x42, 0x42, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x42, 0x24, 0x24, 0x18, 0x18, 0x24, 0x24, 0x42, 0x42, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x41, 0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x02, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 
	0x40, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x20, 0x10, 0x10, 0x08, 
	0x08, 0x04, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x10, 0x10, 0x10, 0x10, 0x10, 
	0x10, 0x10, 0x10, 0x10, 0x10, 0x70, 0x00, 0x00, 0x00, 0x18, 0x24, 0x42, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x20, 0x10, 0x08, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x3C, 0x42, 0x02, 0x3E, 0x42, 0x42, 0x46, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 
	0x40, 0x40, 0x5C, 0x62, 0x42, 0x42, 0x42, 0x42, 0x62, 0x5C, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x3C, 0x42, 0x40, 0x40, 0x40, 0x40, 0x42, 0x3C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x02, 0x02, 0x02, 0x3A, 0x46, 0x42, 0x42, 0x42, 0x42, 0x46, 0x3A, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x7E, 0x40, 0x40, 0x42, 0x3C, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0C, 0x10, 0x10, 0x10, 0x7C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x3A, 0x44, 0x44, 0x44, 0x38, 0x20, 0x3C, 0x42, 
	0x42, 0x3C, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x5C, 0x62, 0x42, 0x42, 0x42, 0x42, 0x42, 
	0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x18, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x0C, 0x04, 0x04, 0x04, 0x04, 
	0x04, 0x04, 0x04, 0x48, 0x30, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x44, 0x48, 0x50, 0x60, 
	0x50, 0x48, 0x44, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x08, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x49, 
	0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 
	0x62, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x3C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x5C, 0x62, 0x42, 0x42, 0x42, 0x42, 0x62, 0x5C, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3A, 0x46, 0x42, 0x42, 0x42, 0x42, 0x46, 0x3A, 0x02, 0x02, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x5C, 0x62, 0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 0x40, 0x30, 0x0C, 0x02, 0x42, 0x3C, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x7C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0C, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x46, 0x3A, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x42, 0x42, 0x24, 0x24, 0x24, 0x18, 0x18, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 
	0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x42, 0x24, 0x18, 0x18, 0x24, 
	0x42, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 
	0x26, 0x1A, 0x02, 0x02, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x02, 0x04, 0x08, 
	0x10, 0x20, 0x40, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x10, 0x10, 0x08, 0x08, 0x10, 
	0x20, 0x10, 0x08, 0x08, 0x10, 0x10, 0x0C, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x30, 0x08, 0x08, 0x10, 
	0x10, 0x08, 0x04, 0x08, 0x10, 0x10, 0x08, 0x08, 0x30, 0x00, 0x00, 0x00, 0x31, 0x49, 0x46, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x06, 0x00, 0x00, 0x3E, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x3C, 0x42, 0x42, 0x40, 0x40, 0x40, 0x40, 0x42, 0x42, 0x3C, 0x08, 0x30, 0x00, 0x00, 0x24, 
	0x24, 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x46, 0x3A, 0x00, 0x00, 0x00, 0x00, 
	0x0C, 0x30, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x7E, 0x40, 0x40, 0x42, 0x3C, 0x00, 0x00, 0x00, 
	0x00, 0x18, 0x24, 0x00, 0x00, 0x3C, 0x42, 0x02, 0x3E, 0x42, 0x42, 0x46, 0x3A, 0x00, 0x00, 
	0x00, 0x00, 0x24, 0x24, 0x00, 0x00, 0x3C, 0x42, 0x02, 0x3E, 0x42, 0x42, 0x46, 0x3A, 0x00, 
	0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x3C, 0x42, 0x02, 0x3E, 0x42, 0x42, 0x46, 0x3A, 
	0x00, 0x00, 0x00, 0x18, 0x24, 0x18, 0x00, 0x00, 0x3C, 0x42, 0x02, 0x3E, 0x42, 0x42, 0x46, 
	0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 0x40, 0x40, 0x40, 0x40, 
	0x42, 0x3C, 0x08, 0x30, 0x00, 0x00, 0x18, 0x24, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x7E, 0x40, 
	0x40, 0x42, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x24, 0x24, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x7E, 
	0x40, 0x40, 0x42, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x3C, 0x42, 0x42, 
	0x7E, 0x40, 0x40, 0x42, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x24, 0x24, 0x00, 0x00, 0x18, 0x08, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x18, 0x24, 0x00, 0x00, 0x18, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 
	0x18, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x3E, 0x00, 0x00, 0x24, 0x24, 0x00, 0x00, 0x18, 
	0x24, 0x24, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x42, 0x00, 0x00, 0x18, 0x24, 0x18, 0x00, 
	0x18, 0x24, 0x24, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x42, 0x00, 0x00, 0x0C, 0x30, 0x00, 
	0x00, 0x7E, 0x40, 0x40, 0x40, 0x7C, 0x40, 0x40, 0x40, 0x40, 0x7E, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3E, 0x49, 0x09, 0x3F, 0x48, 0x48, 0x49, 0x3E, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x1F, 0x28, 0x48, 0x48, 0x7F, 0x48, 0x48, 0x48, 0x48, 0x4F, 0x00, 0x00, 
	0x00, 0x00, 0x18, 0x24, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 
	0x00, 0x00, 0x00, 0x24, 0x24, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 
	0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
	0x3C, 0x00, 0x00, 0x00, 0x00, 0x18, 0x24, 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
	0x46, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 
	0x42, 0x46, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x24, 0x24, 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 
	0x42, 0x26, 0x1A, 0x02, 0x02, 0x3C, 0x24, 0x24, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x42, 
	0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x24, 0x24, 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 
	0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x3E, 
	0x49, 0x48, 0x48, 0x49, 0x3E, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x10, 
	0x10, 0x10, 0x7C, 0x10, 0x10, 0x10, 0x3E, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 
	0x22, 0x14, 0x08, 0x7F, 0x08, 0x7F, 0x08, 0x08, 0x08, 0x00, 0x00, 0x0C, 0x30, 0x00, 0x00, 
	0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x3E, 0x00, 0x00, 0x18, 0x24, 0x00, 
	0x00, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x3E, 0x00, 0x00, 0x00, 0x00, 
	0x0C, 0x30, 0x00, 0x00, 0x3C, 0x42, 0x02, 0x3E, 0x42, 0x42, 0x46, 0x3A, 0x00, 0x00, 0x00, 
	0x00, 0x0C, 0x30, 0x00, 0x00, 0x18, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x3E, 0x00, 0x00, 
	0x00, 0x00, 0x0C, 0x30, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 
	0x00, 0x00, 0x00, 0x0C, 0x30, 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x46, 0x3A, 
	0x00, 0x00, 0x00, 0x00, 0x32, 0x4C, 0x00, 0x00, 0x5C, 0x62, 0x42, 0x42, 0x42, 0x42, 0x42, 
	0x42, 0x00, 0x00, 0x32, 0x4C, 0x00, 0x00, 0x42, 0x62, 0x62, 0x52, 0x52, 0x4A, 0x4A, 0x46, 
	0x46, 0x42, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x02, 0x1E, 0x22, 0x1E, 0x00, 0x3E, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x22, 0x22, 0x22, 0x1C, 0x00, 0x3E, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 
	0x20, 0x40, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x24, 0x24, 0x00, 0x00, 0x3E, 0x08, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x7E, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x62, 
	0x24, 0x28, 0x28, 0x14, 0x1A, 0x22, 0x44, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 
	0x62, 0x24, 0x28, 0x28, 0x12, 0x16, 0x2A, 0x4E, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x08, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x12, 0x12, 0x24, 0x24, 0x48, 0x24, 0x24, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x48, 0x48, 0x24, 0x24, 0x12, 0x24, 0x24, 0x48, 0x48, 0x00, 0x00, 0x88, 
	0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 
	0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 
	0x55, 0xEE, 0xBB, 0xEE, 0xBB, 0xEE, 0xBB, 0xEE, 0xBB, 0xEE, 0xBB, 0xEE, 0xBB, 0xEE, 0xBB, 
	0xEE, 0xBB, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xF8, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xF8, 0x08, 0xF8, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0xF4, 0x14, 0x14, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x14, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x08, 
	0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0xF4, 
	0x04, 0xF4, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xFC, 0x04, 0xF4, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 
	0x14, 0x14, 0xF4, 0x04, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x14, 0x14, 
	0x14, 0x14, 0x14, 0x14, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x08, 0xF8, 0x08, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0F, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xFF, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0F, 0x08, 0x0F, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x17, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x17, 
	0x10, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x1F, 0x10, 0x17, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 
	0x14, 0xF7, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xFF, 0x00, 0xF7, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 
	0x14, 0x14, 0x14, 0x17, 0x10, 0x17, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0xF7, 0x00, 0xF7, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x14, 0x14, 0x14, 0x14, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x1F, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0F, 0x08, 0x0F, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x08, 0x0F, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 
	0xFF, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0xFF, 0x08, 0xFF, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x08, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 
	0x00, 0x78, 0x44, 0x42, 0x42, 0xF2, 0x42, 0x42, 0x42, 0x44, 0x78, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 
	0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 
	0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
	0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x4A, 0x44, 0x44, 0x44, 0x44, 0x4A, 
	0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x44, 0x44, 0x48, 0x58, 0x44, 0x42, 0x42, 
	0x52, 0x4C, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
	0x42, 0x42, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x24, 0x24, 0x24, 
	0x24, 0x24, 0x24, 0x24, 0x00, 0x00, 0x0C, 0x30, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x42, 
	0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x18, 0x24, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 
	0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 
	0x42, 0x42, 0x42, 0x42, 0x42, 0x66, 0x59, 0x40, 0x80, 0x32, 0x4C, 0x00, 0x00, 0x3C, 0x42, 
	0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x42, 0x24, 0x18, 0x24, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 
	0x3A, 0x44, 0x46, 0x4A, 0x4A, 0x52, 0x52, 0x62, 0x22, 0x5C, 0x40, 0x00, 0x30, 0x0C, 0x00, 
	0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x0C, 0x30, 
	0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x49, 0x49, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x18, 0x24, 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 
	0x00, 0x0C, 0x30, 0x00, 0x00, 0x41, 0x41, 0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
	0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x7E, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x7F, 0x08, 0x08, 0x08, 
	0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x18, 0x06, 0x18, 
	0x60, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x18, 0x60, 
	0x18, 0x06, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x78, 0x44, 0x42, 
	0x42, 0x44, 0x78, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x32, 0x4C, 0x00, 0x00, 0x3C, 
	0x42, 0x02, 0x3E, 0x42, 0x42, 0x46, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x18, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x32, 0x4C, 0x00, 0x32, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x18, 0x24, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 
	0x0C, 0x14, 0x22, 0x02, 0x3E, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x07, 0x04, 0x04, 0x04, 0x04, 0x04, 0x74, 0x14, 0x14, 0x0C, 0x0C, 0x04, 0x04, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x64, 0x44, 0x44, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x38, 0x44, 0x04, 0x18, 0x20, 0x40, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
	0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x4C, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x42, 
	0x42, 0x42, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x3C, 0x46, 0x4A, 0x4A, 
	0x52, 0x52, 0x62, 0x3C, 0x40, 0x00, 0x00, 0x00, 0x0C, 0x30, 0x00, 0x00, 0x42, 0x42, 0x42, 
	0x42, 0x42, 0x26, 0x1A, 0x02, 0x02, 0x3C, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x5C, 0x62, 
	0x42, 0x42, 0x42, 0x42, 0x62, 0x5C, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xDB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xDB, 0xDB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 
	0x08, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x18, 0x18, 
	0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x08, 0x08, 0x08, 0x00, 0x08, 0x08, 0x08, 0x00, 0x08, 0x08, 0x08, 0x00, 0x08, 0x08, 
	0x08, 0x00, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00, 0x18, 
	0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x08, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F, 0x18, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xF8, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xF8, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0x18, 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x08, 0xF8, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0F, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x1F, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1F, 0x1F, 0x18, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x1F, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xF8, 
	0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0x18, 0xF8, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x08, 0xF8, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xF8, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x1F, 0x18, 0x18, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x18, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xFF, 0xF8, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xFF, 
	0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x18, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0x18, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0x18, 0x18, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0xFF, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xFF, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xFF, 0xFF, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x18, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0xF8, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x1F, 0x08, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xFF, 0xF8, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xFF, 
	0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0xFF, 0xFF, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0xFF, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0xFF, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0x18, 0xFF, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0x18, 0x18, 0xFF, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0xEE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 
	0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x10, 0x08, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0xE0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x04, 0x03, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x04, 0x04, 0x08, 0x08, 0x10, 
	0x10, 0x20, 0x20, 0x40, 0x40, 0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x20, 0x20, 0x10, 0x10, 
	0x08, 0x08, 0x04, 0x04, 0x02, 0x02, 0x01, 0x01, 0x81, 0x81, 0x42, 0x42, 0x24, 0x24, 0x18, 
	0x18, 0x18, 0x18, 0x24, 0x24, 0x42, 0x42, 0x81, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x18, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xF0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 
	0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0xFC, 
	0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 
	0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 
	0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 
	0xE0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 
	0xC0, 0xC0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
	0x80, 0x80, 0x80, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
	0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 
	0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 
	0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 
	0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 
	0xF0, 0xF0, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
	0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 
	0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x0F, 
	0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x10, 0x10, 0x08, 0x18, 0x24, 0x24, 0x42, 0x42, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x21, 0x12, 0x14, 0x18, 0x28, 0x48, 0x44, 
	0x84, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x66, 
	0x59, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x49, 0x49, 0x49, 0x49, 
	0x5A, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x24, 0x42, 0x42, 0x42, 0x24, 0x18, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x14, 0x24, 0x44, 0x7E, 0x04, 0x04, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x40, 0x40, 0x78, 0x04, 0x04, 
	0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x20, 0x40, 0x78, 0x44, 
	0x44, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x04, 0x08, 0x08, 
	0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x44, 0x44, 
	0x38, 0x44, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x44, 
	0x44, 0x3C, 0x04, 0x08, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x18, 0x24, 0x42, 0x42, 0x42, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x30, 0x50, 0x10, 0x10, 0x10, 0x7C, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x44, 0x04, 0x18, 0x20, 0x40, 0x7C, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x44, 0x04, 0x38, 0x04, 0x44, 0x38, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x14, 0x24, 0x44, 0x7E, 0x04, 0x04, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x40, 0x40, 0x78, 0x04, 0x04, 
	0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x20, 0x40, 0x78, 0x44, 
	0x44, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x04, 0x08, 0x08, 
	0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x44, 0x44, 
	0x38, 0x44, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x44, 
	0x44, 0x3C, 0x04, 0x08, 0x30, 0x00, 0x00, 0x00, 0x00, 0x08, 0x04, 0x7E, 0x04, 0x08, 0x00, 
	0x10, 0x20, 0x7E, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x0C, 
	0xFA, 0x81, 0xFA, 0x0C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x14, 
	0x14, 0x14, 0x22, 0x22, 0x22, 0x41, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x41, 
	0x22, 0x22, 0x22, 0x14, 0x14, 0x14, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3E, 0x40, 0x40, 0x7E, 0x40, 0x40, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x18, 0x24, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x41, 0x41, 0x22, 0x22, 0x14, 0x14, 0x08, 0x08, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x4C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x7E, 0x08, 0x10, 0x7E, 0x20, 
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x18, 0x18, 0x24, 0x24, 0x24, 0x24, 0x18, 
	0x18, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x40, 0x40, 0x40, 
	0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x02, 0x02, 0x02, 
	0x02, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x22, 0x41, 
	0x7F, 0x41, 0x22, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 
	0x40, 0x7E, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 
	0x02, 0x02, 0x7E, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x7F, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x08, 0x3E, 0x1C, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 
	0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1E, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x7F, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x7F, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3E, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x3E, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7F, 0x41, 0x41, 0x41, 0x7F, 0x41, 0x41, 0x7F, 0x41, 0x41, 0x7F, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x41, 0x49, 0x49, 0x41, 0x7F, 0x41, 0x49, 0x49, 0x41, 
	0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x41, 0x49, 0x55, 0x63, 0x41, 0x63, 0x55, 0x49, 
	0x41, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x41, 0x41, 0x41, 0x49, 0x55, 0x55, 0x49, 
	0x41, 0x41, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x41, 0x41, 0x5D, 0x63, 0x41, 0x41, 
	0x63, 0x5D, 0x41, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x1C, 0x2A, 0x49, 0x49, 
	0x49, 0x2A, 0x1C, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x22, 0x49, 
	0x55, 0x49, 0x22, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x04, 
	0x08, 0x08, 0xFF, 0x10, 0x20, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x20, 
	0x20, 0x10, 0x10, 0xFF, 0x08, 0x04, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x41, 
	0x43, 0x45, 0x45, 0x49, 0x51, 0x51, 0x61, 0x41, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 
	0x41, 0x61, 0x51, 0x51, 0x49, 0x45, 0x45, 0x43, 0x41, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x7F, 0x41, 0x41, 0x47, 0x59, 0x61, 0x59, 0x47, 0x41, 0x41, 0x7F, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x7F, 0x41, 0x41, 0x71, 0x4D, 0x43, 0x4D, 0x71, 0x41, 0x41, 0x7F, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x28, 0x7F, 0x28, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x0A, 0x7F, 0x0A, 0x08, 0x08, 0x08, 0x08, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7F, 0x41, 0x41, 0x49, 0x51, 0x7F, 0x51, 0x49, 0x41, 0x41, 0x7F, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x41, 0x41, 0x49, 0x45, 0x7F, 0x45, 0x49, 0x41, 0x41, 
	0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x22, 0x51, 0x49, 0x45, 
	0x22, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
	0x7F, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x1C, 0x1C, 0x2A, 
	0x2A, 0x3E, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x41, 0x41, 0x41, 0x41, 0x63, 0x63, 
	0x55, 0x55, 0x49, 0x41, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x41, 0x41, 0x49, 0x49, 0x55, 
	0x55, 0x63, 0x63, 0x7F, 0x41, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 
	0x1C, 0x2A, 0x2A, 0x1C, 0x08, 0x08, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x1C, 
	0x2A, 0x08, 0x7F, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x49, 0x5D, 
	0x6B, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x3E, 0x00, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x08, 0x08, 0x3E, 0x2A, 0x2A, 0x1C, 0x1C, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 
	0x7F, 0x41, 0x49, 0x55, 0x55, 0x63, 0x63, 0x41, 0x41, 0x41, 0x41, 0x7F, 0x00, 0x00, 0x00, 
	0x00, 0x7F, 0x41, 0x41, 0x7F, 0x63, 0x63, 0x55, 0x55, 0x49, 0x49, 0x41, 0x7F, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7F, 0x08, 0x08, 0x1C, 0x2A, 0x2A, 0x1C, 0x08, 0x08, 0x08, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x7F, 0x08, 0x2A, 0x1C, 0x08, 
	0x00, 0x00, 0x00, 0x00, 0x7F, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x6B, 0x5D, 0x49, 
	0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x14, 0x14, 0x22, 0x22, 
	0x3E, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x14, 0x22, 0x41, 0x22, 
	0x14, 0x08, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x24, 
	0x24, 0x18, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x22, 0x41, 
	0x41, 0x41, 0x22, 0x1C, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x22, 0x49, 
	0x55, 0x49, 0x41, 0x41, 0x41, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x41, 0x49, 0x49, 
	0x49, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 
	0x22, 0x49, 0x7F, 0x5D, 0x55, 0x22, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x41, 
	0x41, 0x49, 0x49, 0x41, 0x41, 0x49, 0x49, 0x41, 0x41, 0x7F, 0x00, 0x00, 0x00, 0x24, 0x24, 
	0x00, 0x7F, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x24, 
	0x24, 0x00, 0x00, 0x3E, 0x22, 0x22, 0x14, 0x14, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x24, 0x24, 0x00, 0x00, 0x08, 0x3E, 0x1C, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00, 0x18, 0x24, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x22, 0x41, 0x41, 0x41, 0x22, 0x1C, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x2A, 0x1C, 
	0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x1F, 0x28, 0x48, 0x48, 0x48, 0x28, 0x1F, 
	0x08, 0x08, 0x00, 0x00, 0x00, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00, 0x32, 0x4C, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x24, 0x00, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 
	0x04, 0x08, 0x10, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x18, 0x08, 
	0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x22, 0x22, 
	0x14, 0x14, 0x39, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x22, 0x22, 
	0x22, 0x33, 0x6E, 0x22, 0x22, 0x22, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 
	0x08, 0x08, 0x08, 0x3A, 0x4C, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 
	0x18, 0x00, 0x00, 0x18, 0x08, 0x08, 0x10, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x41, 
	0x43, 0x45, 0x7F, 0x49, 0x7F, 0x51, 0x61, 0x41, 0x41, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x7F, 
	0x41, 0x49, 0x55, 0x55, 0x45, 0x49, 0x49, 0x41, 0x49, 0x41, 0x7F, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x32, 0x4C, 0x00, 0x22, 0x22, 0x14, 0x14, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x32, 0x4C, 0x00, 0x08, 0x14, 0x14, 0x22, 0x22, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x08, 0x08, 0x08, 0x08, 0x08, 0x06, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x62, 0x5C, 
	0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x41, 0x41, 0x49, 0x49, 0x49, 0x49, 
	0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x4A, 0x44, 0x44, 0x44, 0x4A, 0x32, 
	0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x40, 0x7C, 0x40, 0x40, 
	0x3E, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x08, 0x08, 0x08, 0x08, 
	0x08, 0x06, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x41, 0x49, 0x49, 
	0x49, 0x49, 0x36, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 
	0x14, 0x14, 0x22, 0x22, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 
	0x00, 0x08, 0x14, 0x14, 0x22, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x3E, 0x00, 0x22, 0x22, 0x14, 0x14, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x10, 0x28, 0x44, 0x82, 0x44, 0x28, 0x10, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x41, 
	0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x38, 0x44, 0x44, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x37, 0x48, 0x48, 0x48, 0x4E, 0x48, 0x48, 0x48, 0x48, 0x37, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x49, 0x49, 0x4F, 0x48, 0x48, 0x49, 0x36, 0x00, 0x00, 
	0x24, 0x24, 0x00, 0x00, 0x41, 0x41, 0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x41, 0x3E, 0x22, 0x22, 0x14, 0x14, 0x14, 0x08, 0x08, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0x22, 0x45, 0x49, 0x51, 0x22, 
	0x5C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x7E, 0x08, 0x7E, 0x10, 0x7E, 
	0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x40, 0x40, 0x40, 
	0x3E, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x02, 0x02, 0x02, 
	0x02, 0x7C, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x22, 0x41, 
	0x49, 0x41, 0x22, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x10, 0x18, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x08, 0x08, 0x10, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x08, 0x08, 0x10, 0x00, 0x00, 0x22, 0x44, 0x44, 
	0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x22, 
	0x22, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x22, 0x22, 0x44, 0x00, 0x00, 
	0x08, 0x1C, 0x08, 0x2A, 0x7F, 0x2A, 0x08, 0x1C, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 
	0x08, 0x1C, 0x08, 0x2A, 0x7F, 0x2A, 0x08, 0x08, 0x2A, 0x7F, 0x2A, 0x08, 0x1C, 0x08, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x49, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x12, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x20, 0x12, 0x0C, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x78, 0x7E, 0x7E, 0x78, 0x60, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x1E, 0x7E, 0x7E, 0x1E, 0x06, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x66, 0x5A, 0x5A, 0x7A, 0x76, 0x76, 0x7E, 
	0x76, 0x76, 0x7E, 0x00, 0x00, 0xA4, 0x00, 0xFF, 0xFF, 0x3A, 0x26, 0xFF, 0xFF, 0xA6, 0x00, 
	0xFF, 0xFF, 0xA8, 0x00, 0xFF, 0xFF, 0xC6, 0x25, 0x66, 0x26, 0xFF, 0xFF, 0xA9, 0x00, 0xFF, 
	0xFF, 0xAE, 0x00, 0xFF, 0xFF, 0x22, 0x20, 0x19, 0x22, 0xFF, 0xFF, 0xAF, 0x00, 0xFF, 0xFF, 
	0xAA, 0x26, 0xCB, 0x25, 0xFF, 0xFF, 0xB3, 0x00, 0xFF, 0xFF, 0xB4, 0x00, 0xFF, 0xFF, 0xB8, 
	0x00, 0xFF, 0xFF, 0xB9, 0x00, 0xFF, 0xFF, 0xBE, 0x00, 0xFF, 0xFF, 0xC0, 0x00, 0xFF, 0xFF, 
	0xC1, 0x00, 0xFF, 0xFF, 0xC2, 0x00, 0xFF, 0xFF, 0x95, 0x21, 0xFF, 0xFF, 0xC3, 0x00, 0xFF, 
	0xFF, 0xB6, 0x00, 0xFF, 0xFF, 0xA7, 0x00, 0xFF, 0xFF, 0xC8, 0x00, 0xFF, 0xFF, 0xCA, 0x00, 
	0xFF, 0xFF, 0x91, 0x21, 0xFF, 0xFF, 0x93, 0x21, 0xFF, 0xFF, 0x92, 0x21, 0xFF, 0xFF, 0x90, 
	0x21, 0xFF, 0xFF, 0xCB, 0x00, 0xFF, 0xFF, 0x94, 0x21, 0xFF, 0xFF, 0xB2, 0x25, 0xFF, 0xFF, 
	0xBC, 0x25, 0xFF, 0xFF, 0x20, 0x00, 0xFF, 0xFF, 0x21, 0x00, 0xFF, 0xFF, 0x22, 0x00, 0xFF, 
	0xFF, 0x23, 0x00, 0xFF, 0xFF, 0x24, 0x00, 0xFF, 0xFF, 0x25, 0x00, 0xFF, 0xFF, 0x26, 0x00, 
	0xFF, 0xFF, 0x27, 0x00, 0xFF, 0xFF, 0x28, 0x00, 0xFF, 0xFF, 0x29, 0x00, 0xFF, 0xFF, 0x2A, 
	0x00, 0xFF, 0xFF, 0x2B, 0x00, 0xFF, 0xFF, 0x2C, 0x00, 0xFF, 0xFF, 0x12, 0x22, 0x15, 0x20, 
	0x14, 0x20, 0x13, 0x20, 0x2D, 0x00, 0xFF, 0xFF, 0x2E, 0x00, 0xFF, 0xFF, 0x2F, 0x00, 0xFF, 
	0xFF, 0x30, 0x00, 0xFF, 0xFF, 0x31, 0x00, 0xFF, 0xFF, 0x32, 0x00, 0xFF, 0xFF, 0x33, 0x00, 
	0xFF, 0xFF, 0x34, 0x00, 0xFF, 0xFF, 0x35, 0x00, 0xFF, 0xFF, 0x36, 0x00, 0xFF, 0xFF, 0x37, 
	0x00, 0xFF, 0xFF, 0x38, 0x00, 0xFF, 0xFF, 0x39, 0x00, 0xFF, 0xFF, 0x3A, 0x00, 0xFF, 0xFF, 
	0x3B, 0x00, 0xFF, 0xFF, 0x3C, 0x00, 0x39, 0x20, 0xFF, 0xFF, 0x3D, 0x00, 0xFF, 0xFF, 0x3E, 
	0x00, 0x3A, 0x20, 0xFF, 0xFF, 0x3F, 0x00, 0xFF, 0xFF, 0x40, 0x00, 0xFF, 0xFF, 0x41, 0x00, 
	0xFF, 0xFF, 0x42, 0x00, 0xFF, 0xFF, 0x43, 0x00, 0xFF, 0xFF, 0x44, 0x00, 0xFF, 0xFF, 0x45, 
	0x00, 0xFF, 0xFF, 0x46, 0x00, 0xFF, 0xFF, 0x47, 0x00, 0xFF, 0xFF, 0x48, 0x00, 0xFF, 0xFF, 
	0x49, 0x00, 0xFF, 0xFF, 0x4A, 0x00, 0xFF, 0xFF, 0x4B, 0x00, 0xFF, 0xFF, 0x4C, 0x00, 0xFF, 
	0xFF, 0x4D, 0x00, 0xFF, 0xFF, 0x4E, 0x00, 0xFF, 0xFF, 0x4F, 0x00, 0xFF, 0xFF, 0x50, 0x00, 
	0xFF, 0xFF, 0x51, 0x00, 0xFF, 0xFF, 0x52, 0x00, 0xFF, 0xFF, 0x53, 0x00, 0xFF, 0xFF, 0x54, 
	0x00, 0xFF, 0xFF, 0x55, 0x00, 0xFF, 0xFF, 0x56, 0x00, 0xFF, 0xFF, 0x57, 0x00, 0xFF, 0xFF, 
	0x58, 0x00, 0xFF, 0xFF, 0x59, 0x00, 0xFF, 0xFF, 0x5A, 0x00, 0xFF, 0xFF, 0x5B, 0x00, 0xFF, 
	0xFF, 0x5C, 0x00, 0xFF, 0xFF, 0x5D, 0x00, 0xFF, 0xFF, 0x5E, 0x00, 0xFF, 0xFF, 0x5F, 0x00, 
	0xFF, 0xFF, 0x60, 0x00, 0xFF, 0xFF, 0x61, 0x00, 0xFF, 0xFF, 0x62, 0x00, 0xFF, 0xFF, 0x63, 
	0x00, 0xFF, 0xFF, 0x64, 0x00, 0xFF, 0xFF, 0x65, 0x00, 0xFF, 0xFF, 0x66, 0x00, 0xFF, 0xFF, 
	0x67, 0x00, 0xFF, 0xFF, 0x68, 0x00, 0xFF, 0xFF, 0x69, 0x00, 0xFF, 0xFF, 0x6A, 0x00, 0xFF, 
	0xFF, 0x6B, 0x00, 0xFF, 0xFF, 0x6C, 0x00, 0xFF, 0xFF, 0x6D, 0x00, 0xFF, 0xFF, 0x6E, 0x00, 
	0xFF, 0xFF, 0x6F, 0x00, 0xFF, 0xFF, 0x70, 0x00, 0xFF, 0xFF, 0x71, 0x00, 0xFF, 0xFF, 0x72, 
	0x00, 0xFF, 0xFF, 0x73, 0x00, 0xFF, 0xFF, 0x74, 0x00, 0xFF, 0xFF, 0x75, 0x00, 0xFF, 0xFF, 
	0x76, 0x00, 0xFF, 0xFF, 0x77, 0x00, 0xFF, 0xFF, 0x78, 0x00, 0xFF, 0xFF, 0x79, 0x00, 0xFF, 
	0xFF, 0x7A, 0x00, 0xFF, 0xFF, 0x7B, 0x00, 0xFF, 0xFF, 0x7C, 0x00, 0xFF, 0xFF, 0x7D, 0x00, 
	0xFF, 0xFF, 0x7E, 0x00, 0xFF, 0xFF, 0xCC, 0x00, 0xFF, 0xFF, 0xC7, 0x00, 0xFF, 0xFF, 0xFC, 
	0x00, 0xFF, 0xFF, 0xE9, 0x00, 0xFF, 0xFF, 0xE2, 0x00, 0xFF, 0xFF, 0xE4, 0x00, 0xFF, 0xFF, 
	0xE0, 0x00, 0xFF, 0xFF, 0xE5, 0x00, 0xFF, 0xFF, 0xE7, 0x00, 0xFF, 0xFF, 0xEA, 0x00, 0xFF, 
	0xFF, 0xEB, 0x00, 0xFF, 0xFF, 0xE8, 0x00, 0xFF, 0xFF, 0xEF, 0x00, 0xFF, 0xFF, 0xEE, 0x00, 
	0xFF, 0xFF, 0xEC, 0x00, 0xFF, 0xFF, 0xC4, 0x00, 0xFF, 0xFF, 0xC5, 0x00, 0xFF, 0xFF, 0xC9, 
	0x00, 0xFF, 0xFF, 0xE6, 0x00, 0xFF, 0xFF, 0xC6, 0x00, 0xFF, 0xFF, 0xF4, 0x00, 0xFF, 0xFF, 
	0xF6, 0x00, 0xFF, 0xFF, 0xF2, 0x00, 0xFF, 0xFF, 0xFB, 0x00, 0xFF, 0xFF, 0xF9, 0x00, 0xFF, 
	0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xD6, 0x00, 0xFF, 0xFF, 0xDC, 0x00, 0xFF, 0xFF, 0xA2, 0x00, 
	0xFF, 0xFF, 0xA3, 0x00, 0xFF, 0xFF, 0xA5, 0x00, 0xFF, 0xFF, 0xCD, 0x00, 0xFF, 0xFF, 0xCE, 
	0x00, 0xFF, 0xFF, 0xE1, 0x00, 0xFF, 0xFF, 0xED, 0x00, 0xFF, 0xFF, 0xF3, 0x00, 0xFF, 0xFF, 
	0xFA, 0x00, 0xFF, 0xFF, 0xF1, 0x00, 0xFF, 0xFF, 0xD1, 0x00, 0xFF, 0xFF, 0xAA, 0x00, 0xFF, 
	0xFF, 0xBA, 0x00, 0xFF, 0xFF, 0xBF, 0x00, 0xFF, 0xFF, 0xCF, 0x00, 0xFF, 0xFF, 0xAC, 0x00, 
	0xFF, 0xFF, 0xBD, 0x00, 0xFF, 0xFF, 0xBC, 0x00, 0xFF, 0xFF, 0xA1, 0x00, 0xFF, 0xFF, 0xAB, 
	0x00, 0xFF, 0xFF, 0xBB, 0x00, 0xFF, 0xFF, 0x91, 0x25, 0xFF, 0xFF, 0x92, 0x25, 0xFF, 0xFF, 
	0x93, 0x25, 0xFF, 0xFF, 0x02, 0x25, 0xFF, 0xFF, 0x24, 0x25, 0xFF, 0xFF, 0x61, 0x25, 0xFF, 
	0xFF, 0x62, 0x25, 0xFF, 0xFF, 0x56, 0x25, 0xFF, 0xFF, 0x55, 0x25, 0xFF, 0xFF, 0x63, 0x25, 
	0xFF, 0xFF, 0x51, 0x25, 0xFF, 0xFF, 0x57, 0x25, 0xFF, 0xFF, 0x5D, 0x25, 0xFF, 0xFF, 0x5C, 
	0x25, 0xFF, 0xFF, 0x5B, 0x25, 0xFF, 0xFF, 0x10, 0x25, 0xFF, 0xFF, 0x14, 0x25, 0xFF, 0xFF, 
	0x34, 0x25, 0xFF, 0xFF, 0x2C, 0x25, 0xFF, 0xFF, 0x1C, 0x25, 0xFF, 0xFF, 0x00, 0x25, 0xFF, 
	0xFF, 0x3C, 0x25, 0xFF, 0xFF, 0x5E, 0x25, 0xFF, 0xFF, 0x5F, 0x25, 0xFF, 0xFF, 0x5A, 0x25, 
	0xFF, 0xFF, 0x54, 0x25, 0xFF, 0xFF, 0x69, 0x25, 0xFF, 0xFF, 0x66, 0x25, 0xFF, 0xFF, 0x60, 
	0x25, 0xFF, 0xFF, 0x50, 0x25, 0xFF, 0xFF, 0x6C, 0x25, 0xFF, 0xFF, 0x67, 0x25, 0xFF, 0xFF, 
	0x68, 0x25, 0xFF, 0xFF, 0x64, 0x25, 0xFF, 0xFF, 0x65, 0x25, 0xFF, 0xFF, 0x59, 0x25, 0xFF, 
	0xFF, 0x58, 0x25, 0xFF, 0xFF, 0x52, 0x25, 0xFF, 0xFF, 0x53, 0x25, 0xFF, 0xFF, 0x6B, 0x25, 
	0xFF, 0xFF, 0x6A, 0x25, 0xFF, 0xFF, 0x18, 0x25, 0xFF, 0xFF, 0x0C, 0x25, 0xFF, 0xFF, 0xD0, 
	0x00, 0xFF, 0xFF, 0x84, 0x25, 0xFF, 0xFF, 0x8C, 0x25, 0xFF, 0xFF, 0x90, 0x25, 0xFF, 0xFF, 
	0x80, 0x25, 0xFF, 0xFF, 0xB1, 0x03, 0x7A, 0x23, 0x7A, 0x23, 0xB1, 0x03, 0xFF, 0xFF, 0xDF, 
	0x00, 0xFF, 0xFF, 0xD2, 0x00, 0xFF, 0xFF, 0xC0, 0x03, 0xFF, 0xFF, 0xD3, 0x00, 0xFF, 0xFF, 
	0xD4, 0x00, 0xFF, 0xFF, 0xB5, 0x00, 0xFF, 0xFF, 0xD5, 0x00, 0xFF, 0xFF, 0xD7, 0x00, 0xFF, 
	0xFF, 0xD8, 0x00, 0xFF, 0xFF, 0xD9, 0x00, 0xFF, 0xFF, 0xDA, 0x00, 0xFF, 0xFF, 0x1E, 0x22, 
	0xFF, 0xFF, 0xDB, 0x00, 0xFF, 0xFF, 0xDD, 0x00, 0xFF, 0xFF, 0x29, 0x22, 0xFF, 0xFF, 0x61, 
	0x22, 0xFF, 0xFF, 0xB1, 0x00, 0xFF, 0xFF, 0x7E, 0x2A, 0x65, 0x22, 0xFF, 0xFF, 0x7D, 0x2A, 
	0x64, 0x22, 0xFF, 0xFF, 0xDE, 0x00, 0xFF, 0xFF, 0xE3, 0x00, 0xFF, 0xFF, 0xF7, 0x00, 0xFF, 
	0xFF, 0x48, 0x22, 0xFF, 0xFF, 0xB0, 0x00, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xB7, 0x00, 
	0xFF, 0xFF, 0x1A, 0x22, 0xFF, 0xFF, 0x7F, 0x20, 0xFF, 0xFF, 0xB2, 0x00, 0xFF, 0xFF, 0xA0, 
	0x25, 0x88, 0x25, 0xFF, 0xFF, 0xA0, 0x00, 0xFF, 0xFF, 0xF5, 0x00, 0xFF, 0xFF, 0xF8, 0x00, 
	0xFF, 0xFF, 0xFD, 0x00, 0xFF, 0xFF, 0xFE, 0x00, 0xFF, 0xFF, 0x01, 0x25, 0xFF, 0xFF, 0x03, 
	0x25, 0xFF, 0xFF, 0x04, 0x25, 0xFF, 0xFF, 0x05, 0x25, 0xFF, 0xFF, 0x06, 0x25, 0xFF, 0xFF, 
	0x07, 0x25, 0xFF, 0xFF, 0x08, 0x25, 0xFF, 0xFF, 0x09, 0x25, 0xFF, 0xFF, 0x0A, 0x25, 0xFF, 
	0xFF, 0x0B, 0x25, 0xFF, 0xFF, 0x0D, 0x25, 0xFF, 0xFF, 0x0E, 0x25, 0xFF, 0xFF, 0x0F, 0x25, 
	0xFF, 0xFF, 0x11, 0x25, 0xFF, 0xFF, 0x12, 0x25, 0xFF, 0xFF, 0x13, 0x25, 0xFF, 0xFF, 0x15, 
	0x25, 0xFF, 0xFF, 0x16, 0x25, 0xFF, 0xFF, 0x17, 0x25, 0xFF, 0xFF, 0x19, 0x25, 0xFF, 0xFF, 
	0x1A, 0x25, 0xFF, 0xFF, 0x1B, 0x25, 0xFF, 0xFF, 0x1D, 0x25, 0xFF, 0xFF, 0x1E, 0x25, 0xFF, 
	0xFF, 0x1F, 0x25, 0xFF, 0xFF, 0x20, 0x25, 0xFF, 0xFF, 0x21, 0x25, 0xFF, 0xFF, 0x22, 0x25, 
	0xFF, 0xFF, 0x23, 0x25, 0xFF, 0xFF, 0x25, 0x25, 0xFF, 0xFF, 0x26, 0x25, 0xFF, 0xFF, 0x27, 
	0x25, 0xFF, 0xFF, 0x28, 0x25, 0xFF, 0xFF, 0x29, 0x25, 0xFF, 0xFF, 0x2A, 0x25, 0xFF, 0xFF, 
	0x2B, 0x25, 0xFF, 0xFF, 0x2D, 0x25, 0xFF, 0xFF, 0x2E, 0x25, 0xFF, 0xFF, 0x2F, 0x25, 0xFF, 
	0xFF, 0x30, 0x25, 0xFF, 0xFF, 0x31, 0x25, 0xFF, 0xFF, 0x32, 0x25, 0xFF, 0xFF, 0x33, 0x25, 
	0xFF, 0xFF, 0x35, 0x25, 0xFF, 0xFF, 0x36, 0x25, 0xFF, 0xFF, 0x37, 0x25, 0xFF, 0xFF, 0x38, 
	0x25, 0xFF, 0xFF, 0x39, 0x25, 0xFF, 0xFF, 0x3A, 0x25, 0xFF, 0xFF, 0x3B, 0x25, 0xFF, 0xFF, 
	0x3D, 0x25, 0xFF, 0xFF, 0x3E, 0x25, 0xFF, 0xFF, 0x3F, 0x25, 0xFF, 0xFF, 0x40, 0x25, 0xFF, 
	0xFF, 0x41, 0x25, 0xFF, 0xFF, 0x42, 0x25, 0xFF, 0xFF, 0x43, 0x25, 0xFF, 0xFF, 0x44, 0x25, 
	0xFF, 0xFF, 0x45, 0x25, 0xFF, 0xFF, 0x46, 0x25, 0xFF, 0xFF, 0x47, 0x25, 0xFF, 0xFF, 0x48, 
	0x25, 0xFF, 0xFF, 0x49, 0x25, 0xFF, 0xFF, 0x4A, 0x25, 0xFF, 0xFF, 0x4B, 0x25, 0xFF, 0xFF, 
	0x4C, 0x25, 0xFF, 0xFF, 0x4D, 0x25, 0xFF, 0xFF, 0x4E, 0x25, 0xFF, 0xFF, 0x4F, 0x25, 0xFF, 
	0xFF, 0x6D, 0x25, 0xFF, 0xFF, 0x6E, 0x25, 0xFF, 0xFF, 0x6F, 0x25, 0xFF, 0xFF, 0x70, 0x25, 
	0xFF, 0xFF, 0x71, 0x25, 0xFF, 0xFF, 0x72, 0x25, 0xFF, 0xFF, 0x73, 0x25, 0xFF, 0xFF, 0x74, 
	0x25, 0xFF, 0xFF, 0x75, 0x25, 0xFF, 0xFF, 0x76, 0x25, 0xFF, 0xFF, 0x77, 0x25, 0xFF, 0xFF, 
	0x78, 0x25, 0xFF, 0xFF, 0x79, 0x25, 0xFF, 0xFF, 0x7A, 0x25, 0xFF, 0xFF, 0x7B, 0x25, 0xFF, 
	0xFF, 0x7C, 0x25, 0xFF, 0xFF, 0x7D, 0x25, 0xFF, 0xFF, 0x7E, 0x25, 0xFF, 0xFF, 0x7F, 0x25, 
	0xFF, 0xFF, 0x81, 0x25, 0xFF, 0xFF, 0x82, 0x25, 0xFF, 0xFF, 0x83, 0x25, 0xFF, 0xFF, 0x85, 
	0x25, 0xFF, 0xFF, 0x86, 0x25, 0xFF, 0xFF, 0x87, 0x25, 0xFF, 0xFF, 0x89, 0x25, 0xFF, 0xFF, 
	0x8A, 0x25, 0xFF, 0xFF, 0x8B, 0x25, 0xFF, 0xFF, 0x8D, 0x25, 0xFF, 0xFF, 0x8E, 0x25, 0xFF, 
	0xFF, 0x8F, 0x25, 0xFF, 0xFF, 0x94, 0x25, 0xFF, 0xFF, 0x95, 0x25, 0xFF, 0xFF, 0x96, 0x25, 
	0xFF, 0xFF, 0x97, 0x25, 0xFF, 0xFF, 0x98, 0x25, 0xFF, 0xFF, 0x99, 0x25, 0xFF, 0xFF, 0x9A, 
	0x25, 0xFF, 0xFF, 0x9B, 0x25, 0xFF, 0xFF, 0x9C, 0x25, 0xFF, 0xFF, 0x9D, 0x25, 0xFF, 0xFF, 
	0x9E, 0x25, 0xFF, 0xFF, 0x9F, 0x25, 0xFF, 0xFF, 0xBB, 0x03, 0xFF, 0xFF, 0xC7, 0x03, 0xFF, 
	0xFF, 0xBC, 0x03, 0xFF, 0xFF, 0x61, 0x04, 0xFF, 0xFF, 0x70, 0x20, 0xFF, 0xFF, 0x74, 0x20, 
	0xFF, 0xFF, 0x75, 0x20, 0xFF, 0xFF, 0x76, 0x20, 0xFF, 0xFF, 0x77, 0x20, 0xFF, 0xFF, 0x78, 
	0x20, 0xFF, 0xFF, 0x79, 0x20, 0xFF, 0xFF, 0x80, 0x20, 0xFF, 0xFF, 0x81, 0x20, 0xFF, 0xFF, 
	0x82, 0x20, 0xFF, 0xFF, 0x83, 0x20, 0xFF, 0xFF, 0x84, 0x20, 0xFF, 0xFF, 0x85, 0x20, 0xFF, 
	0xFF, 0x86, 0x20, 0xFF, 0xFF, 0x87, 0x20, 0xFF, 0xFF, 0x88, 0x20, 0xFF, 0xFF, 0x89, 0x20, 
	0xFF, 0xFF, 0xC4, 0x21, 0xFF, 0xFF, 0xE8, 0x21, 0xFF, 0xFF, 0x06, 0x22, 0xFF, 0xFF, 0x07, 
	0x22, 0xFF, 0xFF, 0x08, 0x22, 0x0A, 0x22, 0xFF, 0xFF, 0x18, 0x22, 0xFF, 0xFF, 0x23, 0x22, 
	0xFF, 0xFF, 0x28, 0x22, 0xFF, 0xFF, 0x2A, 0x22, 0xFF, 0xFF, 0x35, 0x22, 0xFF, 0xFF, 0x3C, 
	0x22, 0xFF, 0xFF, 0x60, 0x22, 0xFF, 0xFF, 0x6C, 0x22, 0xFF, 0xFF, 0x82, 0x22, 0xFF, 0xFF, 
	0x83, 0x22, 0xFF, 0xFF, 0x96, 0x22, 0xFF, 0xFF, 0xA2, 0x22, 0xFF, 0xFF, 0xA3, 0x22, 0xFF, 
	0xFF, 0xA4, 0x22, 0xFF, 0xFF, 0xA5, 0x22, 0xFF, 0xFF, 0xC6, 0x22, 0xFF, 0xFF, 0x08, 0x23, 
	0xFF, 0xFF, 0x0A, 0x23, 0xFF, 0xFF, 0x36, 0x23, 0xFF, 0xFF, 0x37, 0x23, 0xFF, 0xFF, 0x38, 
	0x23, 0xFF, 0xFF, 0x39, 0x23, 0xFF, 0xFF, 0x3A, 0x23, 0xFF, 0xFF, 0x3B, 0x23, 0xFF, 0xFF, 
	0x3C, 0x23, 0xFF, 0xFF, 0x3D, 0x23, 0xFF, 0xFF, 0x3E, 0x23, 0xFF, 0xFF, 0x3F, 0x23, 0xFF, 
	0xFF, 0x40, 0x23, 0xFF, 0xFF, 0x41, 0x23, 0xFF, 0xFF, 0x42, 0x23, 0xFF, 0xFF, 0x43, 0x23, 
	0xFF, 0xFF, 0x44, 0x23, 0xFF, 0xFF, 0x45, 0x23, 0xFF, 0xFF, 0x46, 0x23, 0xFF, 0xFF, 0x47, 
	0x23, 0xFF, 0xFF, 0x48, 0x23, 0xFF, 0xFF, 0x49, 0x23, 0xFF, 0xFF, 0x4A, 0x23, 0xFF, 0xFF, 
	0x4B, 0x23, 0xFF, 0xFF, 0x4C, 0x23, 0xFF, 0xFF, 0x4D, 0x23, 0xFF, 0xFF, 0x4E, 0x23, 0xFF, 
	0xFF, 0x4F, 0x23, 0xFF, 0xFF, 0x50, 0x23, 0xFF, 0xFF, 0x51, 0x23, 0xFF, 0xFF, 0x52, 0x23, 
	0xFF, 0xFF, 0x53, 0x23, 0xFF, 0xFF, 0x54, 0x23, 0xFF, 0xFF, 0x55, 0x23, 0xFF, 0xFF, 0x56, 
	0x23, 0xFF, 0xFF, 0x57, 0x23, 0xFF, 0xFF, 0x58, 0x23, 0xFF, 0xFF, 0x59, 0x23, 0xFF, 0xFF, 
	0x5A, 0x23, 0xFF, 0xFF, 0x5B, 0x23, 0xFF, 0xFF, 0x5C, 0x23, 0xFF, 0xFF, 0x5D, 0x23, 0xFF, 
	0xFF, 0x5E, 0x23, 0xFF, 0xFF, 0x5F, 0x23, 0xFF, 0xFF, 0x60, 0x23, 0xFF, 0xFF, 0x61, 0x23, 
	0xFF, 0xFF, 0x62, 0x23, 0xFF, 0xFF, 0x63, 0x23, 0xFF, 0xFF, 0x64, 0x23, 0xFF, 0xFF, 0x65, 
	0x23, 0xFF, 0xFF, 0x66, 0x23, 0xFF, 0xFF, 0x67, 0x23, 0xFF, 0xFF, 0x68, 0x23, 0xFF, 0xFF, 
	0x69, 0x23, 0xFF, 0xFF, 0x6A, 0x23, 0xFF, 0xFF, 0x6B, 0x23, 0xFF, 0xFF, 0x6C, 0x23, 0xFF, 
	0xFF, 0x6D, 0x23, 0xFF, 0xFF, 0x6E, 0x23, 0xFF, 0xFF, 0x6F, 0x23, 0xFF, 0xFF, 0x70, 0x23, 
	0xFF, 0xFF, 0x71, 0x23, 0xFF, 0xFF, 0x72, 0x23, 0xFF, 0xFF, 0x73, 0x23, 0xB9, 0x03, 0xFF, 
	0xFF, 0x74, 0x23, 0xC1, 0x03, 0xFF, 0xFF, 0xC9, 0x03, 0x75, 0x23, 0xC9, 0x03, 0xFF, 0xFF, 
	0x76, 0x23, 0xFF, 0xFF, 0x77, 0x23, 0x77, 0x23, 0xF8, 0x22, 0xFF, 0xFF, 0x78, 0x23, 0xFF, 
	0xFF, 0x79, 0x23, 0xFF, 0xFF, 0x27, 0x22, 0xFF, 0xFF, 0xBC, 0x22, 0xFF, 0xFF, 0xBD, 0x22, 
	0xFF, 0xFF, 0x26, 0x2B, 0xCA, 0x25, 0xC4, 0x22, 0xFF, 0xFF, 0x95, 0x23, 0xAF, 0x25, 0xFF, 
	0xFF, 0xE6, 0x25, 0xFF, 0xFF, 0x52, 0x01, 0xFF, 0xFF, 0x53, 0x01, 0xFF, 0xFF, 0x78, 0x01, 
	0xFF, 0xFF, 0x00, 0x22, 0xFF, 0xFF, 0x05, 0x22, 0xFF, 0xFF, 0x62, 0x22, 0xFF, 0xFF, 0x86, 
	0x22, 0xFF, 0xFF, 0x87, 0x22, 0xFF, 0xFF, 0x99, 0x22, 0xFF, 0xFF, 0x18, 0x20, 0xFF, 0xFF, 
	0x19, 0x20, 0xFF, 0xFF, 0x1A, 0x20, 0xFF, 0xFF, 0x1C, 0x20, 0xFF, 0xFF, 0x1D, 0x20, 0xFF, 
	0xFF, 0x1E, 0x20, 0xFF, 0xFF, 0x20, 0x20, 0xFF, 0xFF, 0x21, 0x20, 0xFF, 0xFF, 0x26, 0x20, 
	0xFF, 0xFF, 0xAC, 0x20, 0xFF, 0xFF, 0xB6, 0x25, 0xFF, 0xFF, 0xC0, 0x25, 0xFF, 0xFF, 0xFD, 
	0xFF, 0xFF, 0xFF
};

void GUI::draw_text(Buffer buffer, uText text) {
	int cursor_x = 0;
	int cursor_y = 0;
	while (*text.text) {
		if (*text.text == '\n') {
			cursor_x = 0;
			cursor_y += text.font_height;
		} else if (*text.text == '\r') {
			cursor_x = 0;
		} else {
			GUI::Utils::text_draw_char(buffer, text.font, cursor_x, cursor_y, *text.text, cursor_x, cursor_y, text.color);
			cursor_x += text.font_width;
			if (cursor_x >= 1920) {
				cursor_x = 0;
				cursor_y += text.font_height;
			}
		}
		text.text++;

		if (cursor_y >= 1080) {
			cursor_y = 0;  // Reset to the top if needed
		}
	}
}

void GUI::draw_text(Window* window, uText text) {
    /*fill_rect(window, uRect32(text.x, text.y, 100, 16), 0x00000000); // Test rectangle

    int cursor_x = 0;
    int cursor_y = 0;
    while (*text.text) {
        if (*text.text == '\n') {
            cursor_x = 0;
            cursor_y += text.font_height;
        } else if (*text.text == '\r') {
            cursor_x = 0;
        } else {
            GUI::Utils::text_draw_char(window, text.font, cursor_x, cursor_y, *text.text, cursor_x, cursor_y, text.color);
            cursor_x += text.font_width;
            if (cursor_x >= 1920) {
                cursor_x = 0;
                cursor_y += text.font_height;
            }
        }
        text.text++;

        if (cursor_y >= 1080) {
            cursor_y = 0;  // Reset to the top if needed
        }
    }*/

	GUI::draw_text(GUI::Buffer(window->buffer, window->width, window->height), text);
}

void GUI::vbe_render_part(Buffer buffer, uPoint32 point, uRect32 rect) {
	for(int64_t y = 0; y < rect.height; y++) {
        for(int64_t x = 0; x < rect.width; x++) {
            vbe_putpixel(point.x + x, point.y + y, buffer.buffer[y * buffer.width + x]);
        }
    }
}

void GUI::vbe_render_all(Buffer buffer, uPoint32 point) {
	for(int64_t y = 0; y < buffer.height; y++) {
        for(int64_t x = 0; x < buffer.width; x++) {
            vbe_putpixel(point.x + x, point.y + y, buffer.buffer[y * buffer.width + x]);
        }
    }
}

void GUI::Utils::text_draw_char(Buffer buffer, PSF1_FONT* font, char c, uint32_t x, uint32_t y,
	uint32_t width, uint32_t height, uint32_t color) {
	uint8_t* glyph = (uint8_t*)font->glyphBuffer + (c * font->psf1_Header->charsize);

	for (int row = 0; row < height; row++) {
		uint8_t bits = glyph[row];
		for (int col = 0; col < width; col++) {
			if (bits & (0x80 >> col)) {
				put_pixel(buffer, uPoint32(x + col, y + row), color);
			}
		}
	}
}

void GUI::Utils::text_draw_char(Window* window, PSF1_FONT* font, char c, uint32_t x, uint32_t y,
    uint32_t width, uint32_t height, uint32_t color) {
    /*uint8_t* glyph = (uint8_t*)font->glyphBuffer + (c * font->psf1_Header->charsize);

    for (int row = 0; row < height; row++) {
        uint8_t bits = glyph[row];
        for (int col = 0; col < width; col++) {
            if (bits & (0x80 >> col)) {
                put_pixel(window, uPoint32(x + col, y + row), color);
            }
        }
    }*/

	GUI::Utils::text_draw_char(GUI::Buffer(window->buffer, window->width, window->height), font, c, x, y, width, height, color);
}

void GUI::Utils::data_to_psf1(PSF1_FONT* font, void* data) {
    font->psf1_Header = static_cast<GUI::PSF1_HEADER *>(data);
    font->glyphBuffer = static_cast<uint8_t*>(data) + sizeof(GUI::PSF1_HEADER);
}
